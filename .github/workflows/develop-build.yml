name: Develop Build and Release

on:
  push:
    branches: [ develop ]

permissions:
  contents: write  # for tag & release

jobs:
  # ──────────────────────────────
  # 1) Prepare: add “-y-dev”, tag, push
  # ──────────────────────────────
  prepare:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm ci

      - name: Bump version and tag
        id: bump
        shell: bash
        run: |
          ver=$(node -p "require('./package.json').version")
          [[ "$ver" == *-y-dev ]] && new="$ver" || new="${ver}-y-dev"
          echo "new_version=$new" >> "$GITHUB_OUTPUT"

          jq ".version=\"${new}\"" package.json > pkg.tmp && mv pkg.tmp package.json

          git config user.name  "github-actions"
          git config user.email "github-actions@github.com"
          git commit -am "Bump version to $new" || echo "nothing to commit"
          git tag -f "v$new"
          git push origin HEAD:develop
          git push origin -f "v$new"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ──────────────────────────────
  # 2) Matrix build (native target per OS)
  # ──────────────────────────────
  build:
    needs: prepare
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: win
          - os: macos-latest
            target: mac
          - os: ubuntu-latest
            target: linux-x64
          - os: ubuntu-latest
            target: linux-arm64

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: develop
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm ci

      - name: Build Electron App
        run: |
          npm run clean
          case "${{ matrix.target }}" in
            win)
              npx electron-builder --windows --publish never
              ;;
            mac)
              npx electron-builder --mac --publish never
              ;;
            linux-x64)
              npx electron-builder --linux --x64 --publish never
              ;;
            linux-arm64)
              npx electron-builder --linux --arm64 --publish never
              ;;
          esac
        env:
          USE_HARD_LINKS: false
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows Artifacts
        if: matrix.target == 'win'
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: dist/**/*.exe

      - name: Upload macOS artifacts
        if: matrix.target == 'mac'
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: dist/**/*.dmg

      - name: Upload Linux x64 artifacts
        if: matrix.target == 'linux-x64'
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: dist/**/*x64*.AppImage

      - name: Upload Linux ARM64 artifacts
        if: matrix.target == 'linux-arm64'
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64-artifacts
          path: dist/**/*arm64*.AppImage

  # ──────────────────────────────
  # 3) Draft release
  # ──────────────────────────────
  release:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    if: needs.build.result == 'success'

    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create draft GitHub release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.prepare.outputs.new_version }}
          draft: true
          files: |
            artifacts/windows-artifacts/*
            artifacts/macos-artifacts/*
            artifacts/linux-artifacts/*
            artifacts/linux-arm64-artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
name: Stable Build and Release

on:
  push:
    branches:
      - stable

permissions:
  contents: write   # needed for tag / release creation

# ─────────────────────────────────────────────
# 1) Prepare: bump version, commit, tag, push
# ─────────────────────────────────────────────
jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.set_version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm ci

      - name: Add “-y-stable” suffix, commit, tag
        id: set_version
        shell: bash
        run: |
          version=$(node -p "require('./package.json').version")
          if [[ "$version" != *-y-stable ]]; then
            new_version="${version}-y-stable"
            jq ".version = \"${new_version}\"" package.json > tmp.json && mv tmp.json package.json

            git config user.name  "github-actions"
            git config user.email "github-actions@github.com"
            git commit -am "Bump version to ${new_version}"
            git tag "v${new_version}"
            git push origin HEAD:stable --follow-tags
          else
            new_version="$version"
          fi
          echo "new_version=${new_version}" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ─────────────────────────────────────────────
  # 2) Build matrix runs after prepare is done
  # ─────────────────────────────────────────────
  build:
    name: Build ${{ matrix.os }}
    needs: prepare
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - run: npm ci
        env:
          NODE_ENV: development

      - name: Build Electron app
        run: npm run build
        env:
          USE_HARD_LINKS: false
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifacts
          path: |
            dist/**/*.exe
            dist/**/*.dmg
            dist/**/*.AppImage

  # ─────────────────────────────────────────────
  # 3) Release (only if all builds succeed)
  # ─────────────────────────────────────────────
  release:
    name: Draft GitHub Release
    needs: [prepare, build]
    if: needs.build.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create GitHub Release (draft)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.prepare.outputs.new_version }}
          draft: true
          files: artifacts/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}